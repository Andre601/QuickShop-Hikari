/*
 *  This file is a part of project QuickShop, the name is BuildInfo.java
 *  Copyright (C) Ghost_chu and contributors
 *
 *  This program is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.ghostchu.quickshop;

import lombok.Builder;
import lombok.Data;
import lombok.SneakyThrows;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.InputStream;
import java.util.Properties;

/**
 * BuildInfo is utilities to help read BUILDINFO file that generated by CodeMC Jenkins.
 *
 * @author Ghost_chu
 */
@Data
public class BuildInfo {
    private final GitInfo gitInfo;
    private final JenkinsInfo ciInfo;
    @SneakyThrows
    public BuildInfo(@Nullable InputStream inputStream) {
        // Read InputStream to String as UTF-8 encoding with Reader
        if(inputStream == null){
            gitInfo = new GitInfo(new Properties());
            ciInfo = new JenkinsInfo(new Properties());
            return;
        }
        Properties properties = new Properties();
        properties.load(inputStream);
        this.gitInfo = new GitInfo(properties);
        this.ciInfo = new JenkinsInfo(properties);
    }

    @Data
    static class GitInfo {
        @Nullable
        private final String branch;
        private final boolean dirty;
        @Nullable
        private final String remoteOriginUrl;
        @Nullable
        private final String id;
        @Nullable
        private final String abbrev;
        @Nullable
        private final String describe;
        @Nullable
        private final String describeShort;
        @Nullable
        private final String commitUsername;
        @Nullable
        private final String commitEmail;
        @Nullable
        private final String commitMessage;
        @Nullable
        private final String commitMessageFull;
        @Nullable
        private final String commitDate;
        @Nullable
        private final String buildTime;
        @Nullable
        private final String buildVersion;
        @Nullable
        private final String buildNumber;
        @Nullable
        private final String tags;

        public GitInfo(@NotNull Properties properties) {
            this.tags = properties.getProperty("git.tags");
            this.branch = properties.getProperty("git.branch");
            this.dirty = "true".equalsIgnoreCase(properties.getProperty("git.dirty"));
            this.remoteOriginUrl = properties.getProperty("git.remote.origin.url");
            this.id = properties.getProperty("git.commit.id");
            this.abbrev = properties.getProperty("git.commit.id.abbrev");
            this.describe = properties.getProperty("git.commit.id.describe");
            this.describeShort = properties.getProperty("git.commit.id.describe-short");
            this.commitUsername = properties.getProperty("git.commit.user.name");
            this.commitEmail = properties.getProperty("git.commit.user.email");
            this.commitMessage = properties.getProperty("git.commit.message.short");
            this.commitMessageFull = properties.getProperty("git.commit.message.full");
            this.commitDate = properties.getProperty("git.commit.time");
            this.buildTime = properties.getProperty("git.build.time");
            this.buildVersion = properties.getProperty("git.build.version");
            this.buildNumber = properties.getProperty("git.build.number");
        }
    }
    @Data
    @Builder
    static class JenkinsInfo {
        private final boolean ci;
        private final int id;
        @Nullable
        private final String idName;
        @Nullable
        private final String tag;
        @Nullable
        private final String url;
        @Nullable
        private final String projectName;
        @Nullable
        private final String projectUrl;
        @Nullable
        private final String projectBaseName;

        public JenkinsInfo(@NotNull Properties properties) {
            this.ci = "true".equalsIgnoreCase(properties.getProperty("jenkins.ci"));
            String idStr = properties.getProperty("ci.build.id");
            if (idStr != null) {
                this.id = Integer.parseInt(properties.getProperty("ci.build.id"));
            } else {
                this.id = -1;
            }
            this.idName = properties.getProperty("ci.build.name");
            this.tag = properties.getProperty("ci.build.tag");
            this.url = properties.getProperty("ci.build.url");
            this.projectName = properties.getProperty("ci.job.name");
            this.projectUrl = properties.getProperty("ci.job.url");
            this.projectBaseName = properties.getProperty("ci.job.base_name");
        }
    }

}
